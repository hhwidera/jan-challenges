package com.widera.janchallenges.blatt03;

import java.util.*;
import java.util.stream.Collectors;

public class Main {

    private static final int MAX_BUS_STOPS = 99;

    private static String INPUT = "8 24 34 52 62 67 78 88 89 115 155 161 169 170 173 198 203 217 240 248 255 259 272 288 298 307 315 334 336 405 406 407 432 434 452 472 479 483 492 504 511 516 519 520 532 539 540 567 577 584 586 590 592 596 598 615 626 639 643 652 657 672 693 710 712 729 734 735 739 743 746 765 779 808 864 866 880 900 917 926 930 938 948 949 954 957 972 991 1017 1019 1043 1048 1050 1052 1056 1063 1075 1080 1089 1107 1111 1115 1117 1121 1155 1161 1166 1168 1175 1183 1184 1196 1217 1241 1249 1260 1273 1282 1287 1305 1310 1312 1315 1330 1332 1333 1342 1350 1355 1367 1397 1407 1411 1416 1418 1419 1422 1424 1445 1447 1456 1460 1461 1470 1487 1499 1508 1515 1521 1534 1546 1554 1561 1568 1581 1593 1638 1658 1664 1669 1672 1673 1681 1682 1700 1704 1709 1717 1734 1743 1775 1806 1868 1876 1882 1896 1903 1941 1944 1964 1979 1982 1983 1984 1986 1999 2001 2003 2005 2006 2016 2048 2071 2076 2085 2107 2116 2139 2146 2154 2167 2170 2179 2219 2221 2245 2253 2263 2266 2273 2285 2300 2310 2319 2341 2348 2355 2367 2394 2397 2398 2409 2411 2414 2416 2422 2423 2438 2451 2464 2472 2501 2503 2514 2517 2565 2569 2591 2595 2598 2599 2610 2621 2631 2672 2678 2699 2714 2716 2724 2728 2742 2757 2758 2768 2770 2779 2784 2787 2799 2804 2807 2814 2822 2826 2830 2835 2840 2849 2870 2876 2880 2884 2894 2900 2902 2905 2927 2943 2945 2969 2976 2979 2990 2998 3013 3022 3025 3048 3053 3077 3079 3081 3096 3118 3128 3166 3172 3197 3208 3220 3228 3230 3232 3233 3249 3261 3272 3290 3326 3333 3336 3382 3398 3399 3421 3429 3449 3452 3461 3472 3499 3553 3554 3558 3559 3568 3576 3577 3582 3616 3621 3622 3623 3638 3639 3640 3650 3652 3663 3671 3687 3718 3720 3721 3739 3752 3753 3770 3773 3780 3798 3804 3808 3815 3826 3831 3838 3844 3852 3874 3875 3889 3913 3923 3935 3937 3945 3984 3986 4001 4017 4037 4051 4057 4079 4083 4119 4122 4172 4183 4189 4195 4205 4210 4221 4234 4235 4241 4248 4251 4259 4268 4281 4284 4285 4314 4335 4360 4370 4373 4396 4402 4404 4413 4415 4417 4422 4436 4441 4442 4445 4449 4451 4456 4458 4472 4484 4495 4510 4517 4537 4557 4562 4564 4569 4573 4574 4576 4592 4599 4604 4615 4625 4631 4644 4652 4661 4665 4679 4702 4714 4715 4719 4725 4727 4743 4760 4765 4767 4795 4796 4799 4810 4815 4817 4822 4830 4843 4845 4856 4886 4895 4898 4905 4912 4920 4922 4938 4943 4955 4956 4971 4974 4986 4994 5001 5034 5035 5037 5040 5041 5055 5064 5076 5093 5103 5105 5117 5140 5147 5152 5159 5164 5174 5197 5230 5246 5248 5254 5258 5280 5281 5290 5305 5321 5325 5331 5342 5343 5344 5387 5401 5420 5428 5438 5443 5452 5453 5464 5485 5491 5502 5524 5539 5547 5570 5572 5575 5579 5583 5584 5596 5599 5604 5605 5619 5629 5634 5636 5642 5646 5663 5666 5678 5691 5693 5694 5728 5753 5760 5768 5788 5789 5790 5803 5816 5822 5829 5841 5851 5861 5866 5878 5893 5895 5898 5899 5923 5932 5951 5957 5958 5960 5967 5973 5974 5980 5993 6007 6008 6010 6023 6028 6031 6041 6066 6067 6069 6072 6091 6102 6108 6117 6126 6135 6143 6146 6155 6159 6174 6183 6186 6200 6204 6211 6215 6228 6240 6242 6252 6284 6286 6301 6312 6318 6326 6328 6330 6356 6362 6365 6388 6396 6399 6400 6403 6411 6426 6428 6433 6438 6442 6456 6476 6477 6488 6505 6508 6548 6549 6571 6576 6588 6598 6608 6614 6615 6617 6620 6624 6638 6641 6650 6660 6664 6681 6691 6696 6713 6723 6760 6777 6780 6786 6797 6798 6800 6803 6808 6810 6812 6826 6835 6839 6840 6848 6860 6863 6873 6883 6885 6898 6900 6902 6920 6930 6931 6935 6956 6960 6986 6988 6993 7016 7036 7040 7052 7118 7126 7135 7137 7138 7145 7146 7157 7172 7173 7175 7179 7185 7191 7201 7212 7217 7221 7231 7233 7235 7261 7277 7291 7296 7309 7317 7322 7326 7329 7354 7372 7383 7422 7425 7426 7440 7447 7449 7468 7502 7508 7509 7532 7539 7588 7596 7617 7636 7649 7652 7656 7659 7667 7670 7674 7689 7698 7705 7713 7721 7722 7729 7730 7731 7739 7740 7746 7758 7776 7782 7784 7789 7791 7793 7808 7824 7837 7851 7867 7878 7891 7896 7922 7957 7964 7985 7988 8015 8016 8023 8027 8033 8047 8049 8059 8067 8071 8092 8107 8121 8132 8135 8146 8154 8155 8165 8186 8192 8201 8204 8209 8211 8215 8223 8233 8240 8255 8259 8266 8269 8279 8283 8290 8308 8317 8325 8344 8351 8352 8358 8363 8378 8379 8382 8392 8400 8406 8423 8427 8452 8456 8469 8472 8524 8583 8618 8620 8621 8623 8624 8629 8640 8665 8666 8678 8681 8687 8697 8699 8711 8720 8730 8738 8746 8750 8759 8760 8764 8781 8792 8795 8842 8846 8848 8849 8850 8853 8857 8863 8920 8944 8952 8953 8954 8977 8982 8995 9015 9026 9028 9035 9049 9052 9057 9058 9059 9060 9123 9126 9137 9148 9150 9165 9167 9172 9177 9183 9186 9203 9211 9224 9225 9227 9231 9249 9251 9254 9261 9270 9288 9312 9315 9328 9342 9346 9350 9375 9377 9379 9385 9395 9407 9436 9441 9463 9497 9502 9519 9536 9543 9545 9551 9555 9558 9560 9564 9566 9567 9568 9570 9588 9594 9603 9614 9619 9633 9635 9637 9647 9653 9666 9672 9691 9696 9698 9732 9736 9740 9773 9775 9784 9787 9789 9793 9799 9828 9831 9834 9839 9842 9843 9857 9859 9868 9895 9898 9903 9908 9913 9919 9920 9928 9931 9953 9969 9970 9978 9985 9986 9988 9992";

    //private static String INPUT = "11 12 14 40 56";
    public static void main(String[] args) {

        // generate all houses
        TreeSet<House> houses = new TreeSet<>();
       for (String houseNumber : INPUT.split(" ")) {
           House house = new House(Integer.valueOf(houseNumber));
           houses.add(house);
       }

        // generate all house buckets. and then generate all house bucket links. every bucket link links two house buckets.
        // start with one house = one bucket. link all buckets together
        List<HouseBucket> houseBuckets = new ArrayList<>();
        for (House house : houses) {
            HouseBucket houseBucket = new HouseBucket(house);
            houseBuckets.add(houseBucket);
        }



        // join buckets. end is when bucket size == MAX_BUS_STOPS. when one bucket is joined in other -> bucket is invalid
        int round = 0;
        while (houseBuckets.size() > MAX_BUS_STOPS) {
            round++;

            List<HouseBucketLink> linksBetweenHouseBuckets = new ArrayList<>();
            HouseBucket lastHouseBucket = null;
            for (HouseBucket houseBucket : houseBuckets) {
                if (lastHouseBucket != null) {
                    linksBetweenHouseBuckets.add(new HouseBucketLink(lastHouseBucket, houseBucket));
                }
                lastHouseBucket = houseBucket;
            }
            // sort house buckets links, minimal bad luck between two buckets first
            linksBetweenHouseBuckets.sort(Comparator.comparingInt(HouseBucketLink::badLuckForBothBucketsTogether));

            HouseBucketLink linkWithMinimalDifference = linksBetweenHouseBuckets.get(0);
            System.out.println("round " + round + ": " + linkWithMinimalDifference.toString());
            linkWithMinimalDifference.joinBuckets();
            houseBuckets = houseBuckets.stream().filter(houseBucket -> houseBucket.isValid()).collect(Collectors.toList());
        }

        // print all valid buckets.
        System.out.println("final buckets:");
        int index = 0;
        double minCompleteBadLuck = 0d;
        for (HouseBucket bucket : houseBuckets) {
            System.out.println(index + " bucket " + bucket);
            minCompleteBadLuck += bucket.badLuck();
            index++;
        }

        System.out.println();
        System.out.println("minCompleteBadLuck: " + minCompleteBadLuck);
        System.out.println("bus stops: " + Arrays.toString(houseBuckets.stream().mapToDouble(houseBucket -> houseBucket.busStop()).toArray()));
    }
}
